<?xml version="1.0"?>
<project name="service" default="tar" basedir=".">
	<description>service打包</description>
  	<property file="build.properties" />
  	<property file="../common/build.properties" />
	
	<target name="depend.deploy">
		<echo>service_depend.deploy start...</echo>
		<ant dir="../common" />
		<echo>service_depend.deploy end...</echo>
	</target>

	<target name="clean" depends="depend.deploy" unless="is.all">
		<echo>service_clean start...</echo>
		<delete dir="${service.path.dist}" />
		<echo>service_clean end...</echo>
	</target>

	<target name="init" depends="clean">
		<echo>service_init start...</echo>
		<mkdir dir="${service.path.build}"/>
		<echo>service_init end...</echo>
	</target>
	
	<target name="compile" depends="init">
		<echo>service_compile start...</echo>
		<javac srcdir="${service.path.src}" destdir="${service.path.build}" debug="true" encoding="UTF-8">
			<include name="**/*.java"/>
			<classpath>
				<path>
					<fileset dir="${lib.path.lib}">
					</fileset>
					<fileset dir="${path.tomcat.lib}">
					</fileset>
					<pathelement location="${common.file.jar}"/>
				</path>
			</classpath>
			<!-- 
				When javac is compiling code it doesn't link against rt.jar by default. Instead it uses special symbol file lib/ct.sym with class stubs.
				Surprisingly this file contains many but not all of internal sun classes.  And the answer is: javac -XDignore.symbol.file. 
				That's what javac uses for compiling rt.jar 
			-->
			<compilerarg value="-XDignore.symbol.file"/>  
		</javac>
		<copy todir="${service.path.build}">
			<fileset dir="${service.path.src}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<echo>service_compile end...</echo>
	</target>
	
	<target name="deploy" depends="compile">
		<echo>service_deploy start...</echo>
		<copy todir="${service.path.deploy}">
			<fileset dir="${service.path.build}">
			</fileset>
		</copy>
		<echo>service_deploy end...</echo>
	</target>
	
	<target name="tar" depends="deploy">
		<echo>service_tar start...</echo>
		<jar destfile="${service.file.jar}">
			<fileset dir="${service.path.deploy}">
			</fileset>
		</jar>
		<echo>jar dist:${service.file.jar}</echo>
		<echo>service_tar end...</echo>
	</target>
	
</project>
